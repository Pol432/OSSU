// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, t;

        let twoToThe = Array.new(16);
        let i = 0;
        let t = 0;
        while (i < 16) {
            let twoToThe[i] = t;
            let t = t + t;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return - x;
        } else {
            return x;
        }
    }

    /** Returns true if the i-th bit of x is 1, false otherwise. */
    function boolean bit(int x, int i) {
        return twoToThe[i] & x > 0;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, nx, ny;

        let nx = Math.abs(x);
        let ny = Math.abs(y);
        let shiftedX = nx;

        while (i < 16) {
            if (Math.bit(ny, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, nx, ny;

        let nx = Math.abs(x);
        let ny = Math.abs(y);

        if ((ny > nx) | (ny < 0)) { 
            return 0; 
        }
        
        let q = Math.divide(nx, ny + ny);
        if ((nx - (2 * q * ny)) < ny) {
            if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
                let q = -q;
            }
            return q + q;
        } else {
            if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
                let q = -q;
            }
            return (q + q) + 1;
        }

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, nx, j, newY;

        let y = 0;
        let nx = Math.abs(x);
        let j = 7;

        while (j > -1) {
            let newY = y + (j + j);
            if ((newY < nx) | (newY = nx)) {
                let y = newY;
            }
            let j = j - 1;
        }
        return y;
        
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
