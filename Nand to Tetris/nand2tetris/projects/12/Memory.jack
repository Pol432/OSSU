// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap;
    static int prev;

    /** Initializes the class. */
    function void init() {
        let heap = 2048;
        let prev = heap;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int next, cur, segSize;
        var int address;

        let next = 1;
        let cur = heap;
        while (~ next = 0) {
            let segSize = heap[cur + 1];

            if ((segSize > (size + 2)) | (segSize = (size + 2))) {
                let heap[cur + 1] = segSize - 2 - size;     // Updating current seg size

                let heap[segSize - size - 2] = 0;           // Next in new seg
                let heap[segSize - size - 1] = size;        // Size in new seg
                let address = segSize - size;               // Object size
                let next = 0;                               // Stop looking for segment
                return address;

            } else {
                let next = heap[cur];
                let cur = next;                             // New address for next segment iteration
            }
        }
        do Sys.error(1);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int next;
        let next = o - 2;

        let heap[prev] = next;
        let prev = next;
        return;
    } 
}
